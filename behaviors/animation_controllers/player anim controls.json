{
    "format_version": "1.10.0",
    "animation_controllers": {
        "controller.animation.player_armor": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "bakunawaArmor": "query.is_item_name_any('slot.armor.head', 'borgy:bakunawa_helmet') && query.is_item_name_any('slot.armor.chest', 'borgy:bakunawa_chestplate') && query.is_item_name_any('slot.armor.legs', 'borgy:bakunawa_leggings') && query.is_item_name_any('slot.armor.feet', 'borgy:bakunawa_boots')"
                        },
                        {
                            "sonicAbsorbtionArmor": "query.is_item_name_any('slot.armor.head', 'borgy:sonic_absorbtion_helmet') && query.is_item_name_any('slot.armor.chest', 'borgy:sonic_absorbtion_chestplate') && query.is_item_name_any('slot.armor.legs', 'borgy:sonic_absorbtion_leggings') && query.is_item_name_any('slot.armor.feet', 'borgy:sonic_absorbtion_boots')"
                        },
                        {
                            "plagueArmor": "query.is_item_name_any('slot.armor.head', 'borgy:plague_mask') && query.is_item_name_any('slot.armor.chest', 'borgy:plague_robe') && query.is_item_name_any('slot.armor.legs', 'borgy:plague_leggings') && query.is_item_name_any('slot.armor.feet', 'borgy:plague_boots')"
                        }
                    ]
                },
                "bakunawaArmor": {
                    "transitions": [
                        {
                            "default": "!query.is_item_name_any('slot.armor.head', 'borgy:bakunawa_helmet') || !query.is_item_name_any('slot.armor.chest', 'borgy:bakunawa_chestplate') || !query.is_item_name_any('slot.armor.legs', 'borgy:bakunawa_leggings') || !query.is_item_name_any('slot.armor.feet', 'borgy:bakunawa_boots')"
                        }
                    ],
                    "animations": [
                        "animBakunawaArmorEffects"
                    ],
                    "on_exit": [
                        "/effect @s conduit_power 0",
                        "/effect @s strength 0",
                        "/effect @s slow_falling 0"
                    ]
                },
                "sonicAbsorbtionArmor": {
                    "transitions": [
                        {
                            "default": "!query.is_item_name_any('slot.armor.head', 'borgy:sonic_absorbtion_helmet') || !query.is_item_name_any('slot.armor.chest', 'borgy:sonic_absorbtion_chestplate') || !query.is_item_name_any('slot.armor.legs', 'borgy:sonic_absorbtion_leggings') || !query.is_item_name_any('slot.armor.feet', 'borgy:sonic_absorbtion_boots')"
                        }
                    ],
                    "on_entry": [
                        "/tag @s add hasSonicAbsorb"
                    ],
                    "on_exit": [
                        "/tag @s remove hasSonicAbsorb"
                    ]
                },
                "plagueArmor": {
                    "transitions": [
                        {
                            "plagueArmor": "!query.is_item_name_any('slot.armor.head', 'borgy:plague_mask') || !query.is_item_name_any('slot.armor.chest', 'borgy:plague_robe') || !query.is_item_name_any('slot.armor.legs', 'borgy:plague_leggings') || !query.is_item_name_any('slot.armor.feet', 'borgy:plague_boots')"
                        }
                    ],
                    "animations": [
                        "animPlagueArmorEffects"
                    ]
                }
            }
        },
        "controller.animation.player_control_icthyosaur": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "descending": "(query.is_riding && query.is_riding ? (query.get_ride -> query.owner_identifier) == 'borgy:icthyosaur') && (query.is_riding ? (query.get_ride -> query.is_saddled))"
                        }
                    ],
                    "on_entry": [
                        "/event entity @e[type=borgy:icthyosaur, c=1, tag=tamed] borgy:deactivate_control",
                        "/effect @e[type=borgy:icthyosaur, c=1, tag=tamed] levitation 0 0"
                    ],
                    "on_exit": [
                        "/event entity @e[type=borgy:icthyosaur, c=1, tag=tamed] borgy:activate_control"
                    ]
                },
                "descending": {
                    "transitions": [
                        {
                            "default": "!query.is_riding || (query.is_riding ? (query.get_ride -> query.owner_identifier) != 'borgy:icthyosaur') || (query.is_riding ? (query.get_ride -> query.is_saddled) == 0) || (query.is_riding ? (query.get_ride -> query.is_in_water) == 0)"
                        },
                        {
                            "ascending": "query.is_jumping"
                        }
                    ],
                    "on_entry": [
                        "/effect @e[type=borgy:icthyosaur, c=1, tag=tamed] levitation 0 0"
                    ]
                },
                "jumpCooldown": {
					"transitions": [
                        {
							"hovering": "return query.is_jumping && query.life_time - variable.jump_cooldown < 0.5;"
						},
						{
							"descending": "return !query.is_jumping && query.life_time - variable.jump_cooldown > 0.5;"
						}
					],
                    "on_entry": [
                        "/effect @e[type=borgy:icthyosaur, c=1, tag=tamed] levitation 0 0"
                    ]
                },
                "ascending": {
                    "animations": [
						"animIcthyosaurAscend"
					],
                    "transitions": [
                        {
                            "default": "!query.is_riding || (query.is_riding ? (query.get_ride -> query.owner_identifier) != 'borgy:icthyosaur') || (query.is_riding ? (query.get_ride -> query.is_saddled) == 0)"
                        },
                        {
                            "descending": "(query.is_riding ? (query.get_ride -> query.is_in_water) == 0)"
                        },
                        {
                            "jumpCooldown": "variable.jump_cooldown = query.life_time; return (!query.is_jumping);"
                        }
                    ]
                },
                "hovering": {
                    "on_entry": [
                        "/event entity @e[type=borgy:icthyosaur, c=1, tag=tamed] borgy:deactivate_control",
                        "/tellraw @p {\"rawtext\":[{\"text\":\"Enabled hover mode\"}]}"
                    ],
                    "on_exit": [
                        "/tellraw @p {\"rawtext\":[{\"text\":\"Disabled hover mode\"}]}",
                        "/event entity @e[type=borgy:icthyosaur, c=1, tag=tamed] borgy:activate_control"
                    ],
                    "transitions": [
                        {
                            "ascending": "return query.life_time - variable.jump_cooldown > 1 && (query.is_jumping == 1.0);"
                        },
                        {
                            "default": "!query.is_riding || (query.is_riding ? (query.get_ride -> query.owner_identifier) != 'borgy:icthyosaur') || (query.is_riding ? (query.get_ride -> query.is_in_water) == 0)"
                        }
                    ]
                }
            }
        },
        "controller.animation.player_control_icthyosaur_bite": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "riding": "query.get_equipped_item_name('main_hand') == 'icthyosaur_staff' && query.is_using_item && query.is_riding ? (query.get_ride -> query.owner_identifier) == 'borgy:icthyosaur'"
                        }
                    ]
                },
                "riding": {
                    "transitions": [
                        {
                            "default": "!query.is_riding || query.get_equipped_item_name('main_hand') != 'icthyosaur_staff' || !query.is_using_item"
                        }
                    ],
                    "on_entry": [
                        "/event entity @e[type=borgy:icthyosaur, tag=icthyosaurSaddled, c=1] borgy:icthyosaur_forced_bite"
                    ],
                    "on_exit": [
                        "/event entity @e[type=borgy:icthyosaur, tag=icthyosaurSaddled, c=1] borgy:icthyosaur_stop_forced_bite"
                    ]
                }
            }
        },
        "controller.animation.player_control_bakunawa": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "descending": "(query.is_riding && query.is_riding ? (query.get_ride -> query.owner_identifier) == 'borgy:bakunawa') && (query.is_riding ? (query.get_ride -> query.is_saddled))"
                        }
                    ]
                },
                "descending": {
                    "animations": [
						"animBakunawaDescend"
					],
                    "transitions": [
                        {
                            "default": "!query.is_riding || (query.is_riding ? (query.get_ride -> query.owner_identifier) != 'borgy:bakunawa') || (query.is_riding ? (query.get_ride -> query.is_saddled) == 0)"
                        },
                        {
                            "ascending": "query.is_jumping"
                        }
                    ],
                    "on_entry": [
                        "/effect @e[type=borgy:bakunawa, c=1, tag=tamed] levitation 0 0"
                    ]
                },
                "jumpCooldown": {
                    "animations": [
						"animBakunawaDescend"
					],
					"transitions": [
                        {
							"hovering": "return query.is_jumping && query.life_time - variable.jump_cooldown < 0.5;"
						},
						{
							"descending": "return !query.is_jumping && query.life_time - variable.jump_cooldown > 0.5;"
						}
					],
                    "on_entry": [
                        "/effect @e[type=borgy:bakunawa, c=1, tag=tamed] levitation 0 0"
                    ]
                },
                "ascending": {
                    "animations": [
						"animBakunawaAscend"
					],
                    "transitions": [
                        {
                            "default": "!query.is_riding || (query.is_riding ? (query.get_ride -> query.owner_identifier) != 'borgy:bakunawa') || (query.is_riding ? (query.get_ride -> query.is_saddled) == 0)"
                        },
                        {
                            "jumpCooldown": "variable.jump_cooldown = query.life_time; return (!query.is_jumping);"
                        }
                    ],
                    "on_entry": [
                        "/effect @e[type=borgy:bakunawa, c=1, tag=tamed] slow_falling 0 0"
                    ]
                },
                "hovering": {
                    "on_entry": [
                        "/event entity @e[type=borgy:bakunawa, c=1, tag=tamed] borgy:on_hover",
                        "@s borgy:clear_bakunawa_effects_two",
                        "/tellraw @p {\"rawtext\":[{\"text\":\"Enabled hover mode\"}]}",
                        "/event entity @e[type=borgy:bakunawa, c=1, tag=tamed] borgy:on_hover",
                        "/execute @e[type=borgy:bakunawa, c=1, tag=tamed] ~ ~ ~ tp @s ~ ~ ~",
                        "/execute @e[type=borgy:bakunawa, c=1, tag=tamed] ~ ~ ~ effect @s levitation 0 0",
                        "/execute @e[type=borgy:bakunawa, c=1, tag=tamed] ~ ~ ~ effect @s slow_falling 0 0"
                    ],
                    "on_exit": [
                        "/tellraw @p {\"rawtext\":[{\"text\":\"Disabled hover mode\"}]}",
                        "/event entity @e[type=borgy:bakunawa, c=1, tag=tamed] borgy:on_stop_hovering"
                    ],
                    "transitions": [
                        {
                            "ascending": "return query.life_time - variable.jump_cooldown > 1 && (query.is_jumping == 1.0);"
                        },
                        {
                            "default": "!query.is_riding || (query.is_riding ? (query.get_ride -> query.owner_identifier) != 'borgy:bakunawa')"
                        }
                    ]
                }
            }
        },
        "controller.animation.player_use_bakunawa_staff": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "biteMode": "(query.is_riding && query.is_riding ? (query.get_ride -> query.owner_identifier) == 'borgy:bakunawa') && (query.is_riding ? (query.get_ride -> query.is_saddled)) && query.get_equipped_item_name('main_hand') == 'bakunawa_staff'"
                        }
                    ],
					"on_exit": [
						"/tellraw @s {\"rawtext\":[{\"text\":\"Ability set to Bite Mode\"}]}"
					]
                },
                "biteMode": {
					"transitions": [
						{
							"default": "(query.get_equipped_item_name('main_hand') != 'bakunawa_staff') || !query.is_riding || (query.get_ride -> query.owner_identifier) != 'borgy:bakunawa'"
						},
						{
							"biteModeLimbo": "query.is_using_item && (query.get_ride -> query.is_saddled)"
						}
					]
                },
                "biteModeLimbo": {
                    "animations": [
                        "animUseStaffTimer"
                    ],
					"transitions": [
						{
							"default": "(query.get_equipped_item_name('main_hand') != 'bakunawa_staff') || !query.is_riding || (query.get_ride -> query.owner_identifier) != 'borgy:bakunawa'"
						},
						{
							"useBiteMode": "!query.is_using_item"
						},
						{
							"biteToBreath": "query.all_animations_finished"
						}
					]
                },
                "useBiteMode": {
                    "transitions": [
						{
							"biteMode": "(1.0)"
						}
					],
                    "on_entry": [
                        "/event entity @e[type=borgy:bakunawa, tag=bakunawaHasRider, c=1] borgy:bakunawa_forced_bite"
                    ],
                    "on_exit": [
                        "/event entity @e[type=borgy:bakunawa, tag=bakunawaHasRider, c=1] borgy:bakunawa_stop_forced_bite"
                    ]
                },
                "biteToBreath": {
                    "transitions": [
						{
							"default": "(query.get_equipped_item_name('main_hand') != 'bakunawa_staff') || !query.is_riding || (query.get_ride -> query.owner_identifier) != 'borgy:bakunawa'"
						},
						{
							"breathMode": "!query.is_using_item"
						}
					],
					"on_exit": [
						"/tellraw @s {\"rawtext\":[{\"text\":\"Ability set to Breath Mode\"}]}"
					]
                },
                "breathMode": {
                    "transitions": [
						{
							"default": "(query.get_equipped_item_name('main_hand') != 'bakunawa_staff') || !query.is_riding || (query.get_ride -> query.owner_identifier) != 'borgy:bakunawa'"
						},
						{
							"breathModeLimbo": "query.is_using_item"
						}
					]
                },
                "breathModeLimbo": {
                    "animations": [
                        "animUseStaffTimer"
                    ],
					"transitions": [
						{
							"default": "(query.get_equipped_item_name('main_hand') != 'bakunawa_staff') || !query.is_riding || (query.get_ride -> query.owner_identifier) != 'borgy:bakunawa'"
						},
						{
							"useBreathMode": "!query.is_using_item"
						},
						{
							"breathToBite": "query.all_animations_finished"
						}
					]
                },
                "useBreathMode": {
                    "transitions": [
                        {
                            "breathMode": "(1.0)"
                        }
                    ],
                    "on_entry": [
                        "/event entity @e[type=borgy:bakunawa, c=1, tag=bakunawaHasRider] borgy:force_use_breath_attack"
                    ],
                    "on_exit": [
                        "/event entity @e[type=borgy:bakunawa, c=1, tag=bakunawaHasRider] borgy:stop_force_use_breath_attack"
                    ]
                },
                "breathToBite": {
                    "transitions": [
						{
							"default": "(query.get_equipped_item_name('main_hand') != 'bakunawa_staff') || !query.is_riding || (query.get_ride -> query.owner_identifier) != 'borgy:bakunawa'"
						},
						{
							"biteMode": "!query.is_using_item"
						}
					],
					"on_exit": [
						"/tellraw @s {\"rawtext\":[{\"text\":\"Ability set to Bite Mode\"}]}"
					]
                }
            }
        },
        "controller.animation.player_use_lavawyrm_staff": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "biteMode": "(query.is_riding && query.is_riding ? (query.get_ride -> query.owner_identifier) == 'borgy:lavawyrm') && (query.is_riding ? (query.get_ride -> query.is_saddled)) && query.get_equipped_item_name('main_hand') == 'lavawyrm_staff'"
                        }
                    ],
					"on_exit": [
						"/tellraw @s {\"rawtext\":[{\"text\":\"Ability set to Bite Mode\"}]}"
					]
                },
                "biteMode": {
					"transitions": [
						{
							"default": "(query.get_equipped_item_name('main_hand') != 'lavawyrm_staff') || !query.is_riding || (query.get_ride -> query.owner_identifier) != 'borgy:lavawyrm'"
						},
						{
							"biteModeLimbo": "query.is_using_item && (query.get_ride -> query.is_saddled)"
						}
					]
                },
                "biteModeLimbo": {
                    "animations": [
                        "animUseStaffTimer"
                    ],
					"transitions": [
						{
							"default": "(query.get_equipped_item_name('main_hand') != 'lavawyrm_staff') || !query.is_riding || (query.get_ride -> query.owner_identifier) != 'borgy:lavawyrm'"
						},
						{
							"useBiteMode": "!query.is_using_item"
						},
						{
							"biteToFlameCharge": "query.all_animations_finished"
						}
					]
                },
                "useBiteMode": {
                    "transitions": [
						{
							"biteMode": "(1.0)"
						}
					],
                    "on_entry": [
                        "/event entity @e[type=borgy:lavawyrm, tag=lavawyrmHasRider, c=1] borgy:lavawyrm_forced_bite"
                    ],
                    "on_exit": [
                        "/event entity @e[type=borgy:lavawyrm, tag=lavawyrmHasRider, c=1] borgy:lavawyrm_stop_forced_bite"
                    ]
                },
                "biteToFlameCharge": {
                    "transitions": [
						{
							"default": "(query.get_equipped_item_name('main_hand') != 'lavawyrm_staff') || !query.is_riding || (query.get_ride -> query.owner_identifier) != 'borgy:lavawyrm'"
						},
						{
							"flameChargeMode": "!query.is_using_item"
						}
					],
					"on_exit": [
						"/tellraw @s {\"rawtext\":[{\"text\":\"Ability set to Flame Charge Mode\"}]}"
					]
                },
                "flameChargeMode": {
                    "transitions": [
						{
							"default": "(query.get_equipped_item_name('main_hand') != 'lavawyrm_staff') || !query.is_riding || (query.get_ride -> query.owner_identifier) != 'borgy:lavawyrm'"
						},
						{
							"flameChargeModeLimbo": "query.is_using_item"
						}
					]
                },
                "flameChargeModeLimbo": {
                    "animations": [
                        "animUseStaffTimer"
                    ],
					"transitions": [
						{
							"default": "(query.get_equipped_item_name('main_hand') != 'lavawyrm_staff') || !query.is_riding || (query.get_ride -> query.owner_identifier) != 'borgy:lavawyrm'"
						},
						{
							"useFlameChargeMode": "!query.is_using_item && !(query.get_ride -> query.is_illager_captain)"
						},
						{
							"useFlameChargeModeFail": "!query.is_using_item && (query.get_ride -> query.is_illager_captain)"
						},
						{
							"flameChargeToBite": "query.all_animations_finished"
						}
					]
                },
                "useFlameChargeMode": {
                    "transitions": [
                        {
                            "flameChargeMode": "(1.0)"
                        }
                    ],
                    "on_entry": [
                        "/event entity @e[type=borgy:lavawyrm, c=1, tag=lavawyrmHasRider] borgy:activate_flame_charge"
                    ]
                },
                "useFlameChargeModeFail": {
                    "transitions": [
                        {
                            "flameChargeMode": "(1.0)"
                        }
                    ],
                    "on_entry": [
						"/tellraw @s {\"rawtext\":[{\"text\":\"Cannot flame charge for another 10 seconds!\"}]}"
                    ]
                },
                "flameChargeToBite": {
                    "transitions": [
						{
							"default": "(query.get_equipped_item_name('main_hand') != 'lavawyrm_staff') || !query.is_riding || (query.get_ride -> query.owner_identifier) != 'borgy:lavawyrm'"
						},
						{
							"biteMode": "!query.is_using_item"
						}
					],
					"on_exit": [
						"/tellraw @s {\"rawtext\":[{\"text\":\"Ability set to Bite Mode\"}]}"
					]
                }
            }
        },
        "controller.animation.player_ride_bakunawa_with_heart": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "hasHeart": "(query.is_riding ? (query.get_ride -> query.owner_identifier) == 'borgy:bakunawa') && (query.is_riding ? (query.get_ride -> query.is_saddled)) && (query.is_riding ? (query.get_ride -> query.is_sheared))"
                        }
                    ]
                },
                "hasHeart": {
                    "animations": [
                        "animRideBakunawaWithHeart"
                    ],
                    "transitions": [
                        {
                            "default": "!query.is_riding || !(query.get_ride -> query.is_sheared) || (query.is_riding ? (query.get_ride -> query.owner_identifier) != 'borgy:bakunawa')"
                        }
                    ]
                }
            }
        },
        "controller.animation.player_ride_lavawyrm": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "riding": "(query.is_riding ? (query.get_ride -> query.owner_identifier) == 'borgy:lavawyrm')"
                        }
                    ]
                },
                "riding": {
                    "animations": [
                        "animRideLavawyrm"
                    ],
                    "transitions": [
                        {
                            "default": "!query.is_riding || ((query.get_ride -> query.owner_identifier) != 'borgy:lavawyrm')"
                        }
                    ]
                }
            }
        },
        "controller.animation.player_dismount": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "riding": "query.is_riding"
                        }
                    ]
                },
                "riding": {
                    "transitions": [
                        {
                            "default": "!query.is_riding"
                        }
                    ],
                    "on_exit": [
                        "/event entity @e[type=borgy:icthyosaur, tag=icthyosaurSaddled, c=1] borgy:no_forced_attack_family"
                    ]
                }
            }
        },
        "controller.animation.player_weapon_management": {
            "initial_state": "default",
            "states": {
                "default": {
                    "transitions": [
                        {
                            "bileLauncher": "query.get_equipped_item_name('main_hand') == 'bile_launcher'"
                        },
                        {
                            "headcrabLauncher": "query.get_equipped_item_name('main_hand') == 'headcrab_launcher'"
                        },
                        {
                            "sonicCannon": "query.get_equipped_item_name('main_hand') == 'sonic_cannon'"
                        }
                    ]
                },
                "bileLauncher": {
                    "transitions": [
                        {
                            "default": "query.get_equipped_item_name('main_hand') != 'bile_launcher'"
                        }
                    ],
                    "on_entry": [
                        "/tag @s add hasBileLauncher"
                    ],
                    "on_exit": [
                        "/tag @s remove hasBileLauncher"
                    ]
                },
                "headcrabLauncher": {
                    "transitions": [
                        {
                            "default": "query.get_equipped_item_name('main_hand') != 'headcrab_launcher'"
                        }
                    ],
                    "on_entry": [
                        "/tag @s add hasHeadcrabLauncher"
                    ],
                    "on_exit": [
                        "/tag @s remove hasHeadcrabLauncher"
                    ]
                },
                "sonicCannon": {
                    "transitions": [
                        {
                            "default": "query.get_equipped_item_name('main_hand') != 'sonic_cannon'"
                        }
                    ],
                    "on_entry": [
                        "/tag @s add hasSonicCannon"
                    ],
                    "on_exit": [
                        "/tag @s remove hasSonicCannon"
                    ]
                }
            }
        }
    }
}